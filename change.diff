diff --git a/cw2graphite.js b/cw2graphite.js
index a6ee188..6dcda1c 100644
--- a/cw2graphite.js
+++ b/cw2graphite.js
@@ -3,7 +3,9 @@ require('./lib/date');
 var global_options = require('./lib/options.js').readCmdOptions();
 
 // TODO put graphite IP into a config file
-var graphite = require('graphite');
+var graphite = require('graphite').createClient('plaintext://10.148.25.134:2003/');
+// count of metrics written to graphite.
+var written = 0;
 
 var awssum = require('awssum');
 var amazon = require('awssum-amazon');
@@ -67,6 +69,7 @@ function getOneStat(metric) {
        metric.name = metric.name.toLowerCase()
 
        cloudwatch.GetMetricStatistics(options, function(error, response) {
+         written++;
 
 
                if(error) {
@@ -97,13 +100,9 @@ function getOneStat(metric) {
         m[metric.name] = metric.value;
         // TODO this is terrible. rather than have a separate queue of in-flight
         // requests, or using graphite's multiple-metrics-at-once pickle protocol,
-        // we use plaintext and create/destroy a client for each individual metric, yuck.
-        // since we only do a few per minute, this will work temporarily.
-        // but must absolutely be fixed.
-        var client = graphite.createClient('plaintext://10.148.25.134:2003/');
-        client.write(m, metric.ts, function(err) {
+        // we increment a counter for each case, yuck.
+        graphite.write(m, metric.ts, function(err) {
           if (err) console.log('ERROR! Failed to write to graphite server: ' + err);
-          client.end();
         });
 
                                
@@ -122,5 +121,7 @@ function getOneStat(metric) {
                        } //if(memberObject != undefined)
 
                }
+               // ugz. see other TODO about this.
+               if (written >= metrics.length) { graphite.end() }
        });
